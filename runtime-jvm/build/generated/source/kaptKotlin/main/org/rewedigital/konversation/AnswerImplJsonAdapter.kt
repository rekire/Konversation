// Code generated by moshi-kotlin-codegen. Do not edit.
package org.rewedigital.konversation

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonDataException
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import java.lang.NullPointerException
import kotlin.String
import kotlin.collections.List
import kotlin.collections.MutableList
import kotlin.collections.MutableMap

internal class AnswerImplJsonAdapter(moshi: Moshi) : JsonAdapter<AnswerImpl>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("parts", "suggestions", "reprompts")

    private val mutableListOfPartAdapter: JsonAdapter<MutableList<Part>> =
            moshi.adapter<MutableList<Part>>(Types.newParameterizedType(MutableList::class.java, Part::class.java), kotlin.collections.emptySet(), "parts")

    private val mutableListOfStringAdapter: JsonAdapter<MutableList<String>> =
            moshi.adapter<MutableList<String>>(Types.newParameterizedType(MutableList::class.java, String::class.java), kotlin.collections.emptySet(), "suggestions")

    private val mutableMapOfStringListOfStringAdapter: JsonAdapter<MutableMap<String, List<String>>> =
            moshi.adapter<MutableMap<String, List<String>>>(Types.newParameterizedType(MutableMap::class.java, String::class.java, Types.newParameterizedType(List::class.java, String::class.java)), kotlin.collections.emptySet(), "reprompts")

    override fun toString(): String = "GeneratedJsonAdapter(AnswerImpl)"

    override fun fromJson(reader: JsonReader): AnswerImpl {
        var parts: MutableList<Part>? = null
        var suggestions: MutableList<String>? = null
        var reprompts: MutableMap<String, List<String>>? = null
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 -> parts = mutableListOfPartAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'parts' was null at ${reader.path}")
                1 -> suggestions = mutableListOfStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'suggestions' was null at ${reader.path}")
                2 -> reprompts = mutableMapOfStringListOfStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'reprompts' was null at ${reader.path}")
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = AnswerImpl()
        result = AnswerImpl(
                parts = parts ?: result.parts,
                suggestions = suggestions ?: result.suggestions,
                reprompts = reprompts ?: result.reprompts)
        return result
    }

    override fun toJson(writer: JsonWriter, value: AnswerImpl?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("parts")
        mutableListOfPartAdapter.toJson(writer, value.parts)
        writer.name("suggestions")
        mutableListOfStringAdapter.toJson(writer, value.suggestions)
        writer.name("reprompts")
        mutableMapOfStringListOfStringAdapter.toJson(writer, value.reprompts)
        writer.endObject()
    }
}
