import java.nio.file.Paths

plugins {
    id 'kotlin-platform-jvm'
    // FIX COMPILE ERROR WITH THIS
    //id 'org.jetbrains.kotlin.kapt' version '1.3.31'
    id 'maven-publish'
    id 'com.novoda.bintray-release'
}
repositories {
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "http://dl.bintray.com/kotlin/kotlin-eap" }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect:${rootProject.ext.versions.kotlin}"
    expectedBy project(":runtime-shared")
    expectedBy project(":shared")
    compile project(":shared")
    testCompile "junit:junit:4.12"
    testCompile "org.jetbrains.kotlin:kotlin-test"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit"
    // FIX COMPILE ERROR WITH THIS
    //kapt 'com.squareup.moshi:moshi-kotlin-codegen:1.8.0'
    compile 'com.squareup.moshi:moshi-kotlin:1.8.0'
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'

    // FIX COMPILE ERROR WITH THIS
    //main.java.srcDirs += file("$buildDir/stubs")

    // For kotlin code gen during kapt
    main.java.srcDirs += [file("$buildDir/generated/source/kaptKotlin/main")]
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
sourceCompatibility = "1.8"

task copyStubs(type: Copy) {
    from file("$rootDir/shared/src/main/kotlin/org/rewedigital/konversation/")
    include "**/Part*.kt"
    into file("$buildDir/stubs/org/rewedigital/konversation/")
}
build.dependsOn copyStubs

apply from: '../docu.gradle'
dokka {
    impliedPlatforms = ["JVM"] // This will force platform tags for all non-common sources e.g. "JVM"
    kotlinTasks {
        // dokka fails to retrieve sources from MPP-tasks so they must be set empty to avoid exception
        // use sourceRoot instead (see below)
        []
    }
    sourceRoot {
        // assuming there is only a single source dir...
        path = kotlin.sourceSets.main.kotlin.srcDirs[0]
        platforms = ["JVM"]
    }
    externalDocumentationLink {
        url = new URL("https://github.com/rewe-digital-incubator/${rootProject.name}/blob/master/docs/shared/")
        packageListUrl = Paths.get("$rootDir/docs/shared/package-list").toUri().toURL()
    }
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier = 'javadoc'
    from "$buildDir/javadoc"
}

publishing.publications {
    jvm(MavenPublication) {
        groupId = "org.rewedigital.voice"
        artifactId = "konversation"
        version = "${rootProject.ext.versions.runtime_jvm}"
        artifact sourcesJar {
            archiveClassifier = 'sources'
        }
        artifact javadocJar {
            archiveClassifier = 'javadoc'
        }
        from components.java
        pom {
            name = 'konversation'
            description = 'Konversation is a tool to generate rich and diversified responses to the user of a voice application.'
            url = 'https://github.com/rewe-digital-incubator/Konversation'
            licenses {
                license {
                    name = 'MIT License'
                    url = 'https://opensource.org/licenses/MIT'
                    distribution = 'repo'
                }
            }
            developers {
                developer {
                    name = 'RenÃ© Kilczan'
                    email = 'rene.kilczan@rewe-digital.com'
                }
            }

            scm {
                connection = 'scm:git:git://github.com/rewe-digital-incubator/dialog.git'
                developerConnection = 'scm:git:git://github.com/rewe-digital-incubator/dialog.git'
                url = 'https://github.com/rewe-digital-incubator/dialog'
            }
        }

        // remove internal dependencies they are included in the output jar
        pom.withXml {
            asNode().dependencies.dependency.each { dep ->
                if (dep.artifactId.last().value().last() in ["runtime-shared", "shared"]) {
                    assert dep.parent().remove(dep)
                }
            }
        }
    }
}

publish {
    userOrg = 'rewe-digital'
    groupId = 'org.rewedigital.voice'
    artifactId = 'Konversation'
    repoName = 'Konversation'
    publishVersion = rootProject.ext.versions.runtime_jvm
    desc = 'Konversation is a tool to generate rich and diversified responses to the user of a voice application.'
    website = 'https://github.com/rewe-digital-incubator/Konversation'
    licences = ['MIT']
    bintrayUser = project.properties['bintray.user']
    bintrayKey = project.properties['bintray.apikey']
    dryRun = false
    publications = ['jvm']
}

task printClasspath {
    doLast {
        configurations.testRuntime.each { println it }
    }
}