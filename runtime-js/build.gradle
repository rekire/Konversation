plugins {
    id 'kotlin-platform-js' version '1.3.11'
    id "com.moowork.node" version "1.2.0"
}
repositories {
    mavenCentral()
    maven { url "http://dl.bintray.com/kotlin/kotlin-eap" }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js"
    compile "org.jetbrains.kotlin:kotlin-reflect"
    expectedBy project(":runtime-shared")
    expectedBy project(":shared")
    testCompile "org.jetbrains.kotlin:kotlin-test-js"
}

sourceSets {
    //main.java.srcDirs += [file("$buildDir/../../shared/src/main/kotlin")]
}

compileKotlin2Js {
    kotlinOptions.sourceMap = true
    kotlinOptions.sourceMapEmbedSources = "always"
    kotlinOptions.outputFile = "${buildDir}/out/runtime.js"
    kotlinOptions.moduleKind = "umd"
}

node {
    download = true
    nodeModulesDir = file("${buildDir}/out")
}

task copyResources(type: Copy) {
    from file("${projectDir}/src/main/resources/")
    include "**/*"
    into file("${buildDir}/out")
}

task copyTest(type: Copy) {
    from file("${projectDir}/src/test/")
    include "**/*.js"
    into file("${buildDir}/out/test")
}

task copySources(type: Copy) {
    from file("${projectDir}/src/main/javascript")
    include "**/*"
    into file("${buildDir}/out/")
}

task copyReadme(type: Copy) {
    from file("${projectDir}/readme.md")
    include "**/*"
    into file("${buildDir}/out/")
}

task prepairNpmPackage(type: NpmTask, dependsOn: [compileTestKotlin2Js, copyResources, copyTest, copySources, copyReadme]) {
    inputs.file("${buildDir}/out/package.json")
    outputs.upToDateWhen { file("${buildDir}/out/node_modules").exists() }
    npmCommand = ['install', 'kotlin']
}

task npmPack(type: NpmTask, dependsOn: prepairNpmPackage) {
    inputs.file("${buildDir}/out/package.json")
    outputs.upToDateWhen { file("${buildDir}/out/konversation-0.1.0.tgz").exists() }
    npmCommand = ['pack']
}

task overridePackageForTesting(type: Copy, dependsOn: npmPack) {
    from file("${projectDir}/src/test/")
    include "**/package.json"
    into file("${buildDir}/out")
}

task installSnapshotForTesting(type: NpmTask, dependsOn: overridePackageForTesting) {
    inputs.file("${buildDir}/out/package.json")
    outputs.upToDateWhen { file("${buildDir}/out/node_modules/konversation").exists() }
    npmCommand = ['install', './konversation-0.1.0.tgz', 'mocha']
}

task runNpmTest(type: NpmTask, dependsOn: installSnapshotForTesting) {
    inputs.file("${buildDir}/out/package.json")
    npmCommand = ['test']
}

test.dependsOn runNpmTest