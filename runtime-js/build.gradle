import java.nio.file.Paths

plugins {
    id 'kotlin-platform-js'
    id "com.github.node-gradle.node" version "1.3.0"
    id 'org.jetbrains.dokka'
}
apply from: '../docu.gradle'

repositories {
    mavenCentral()
    maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
}

dependencies {
    compile 'org.jetbrains.kotlin:kotlin-stdlib-js'
    compile 'org.jetbrains.kotlin:kotlin-reflect'
    expectedBy project(':runtime-shared')
    expectedBy project(':shared')
    testCompile 'org.jetbrains.kotlin:kotlin-test-js'
    testCompile "junit:junit:4.12"
}

compileKotlin2Js {
    kotlinOptions.sourceMap = true
    kotlinOptions.sourceMapEmbedSources = "always"
    kotlinOptions.outputFile = "${buildDir}/out/runtime.js"
    kotlinOptions.moduleKind = "umd"
}

node {
    download = true
    nodeModulesDir = file("${buildDir}/out")
}

dokka {
    impliedPlatforms = ["JS"] // This will force platform tags for all non-common sources e.g. "JVM"
    kotlinTasks {
        // dokka fails to retrieve sources from MPP-tasks so they must be set empty to avoid exception
        // use sourceRoot instead (see below)
        []
    }
    sourceRoot {
        // assuming there is only a single source dir...
        path = kotlin.sourceSets.main.kotlin.srcDirs[0]
        platforms = ["JS"]
    }
    externalDocumentationLink {
        url = new URL("https://github.com/rewe-digital-incubator/${rootProject.name}/blob/master/docs/shared/")
        packageListUrl = Paths.get("$rootDir/docs/shared/package-list").toUri().toURL()
    }
}

task copyResources(type: Copy) {
    from file("${projectDir}/src/main/resources/")
    include "**/*"
    into file("${buildDir}/out")
}

task copyTest(type: Copy) {
    from file("${projectDir}/src/test/javascript/")
    include "**/*.js"
    into file("${buildDir}/out/test")
}

task copySources(type: Copy) {
    from file("${projectDir}/src/main/javascript")
    include "**/*"
    into file("${buildDir}/out/")
}

task copyReadme(type: Copy) {
    from file("${projectDir}/readme.md")
    include "**/*"
    into file("${buildDir}/out/")
}

task prepairNpmPackage(type: NpmTask, dependsOn: [compileTestKotlin2Js, copyResources, copyTest, copySources, copyReadme]) {
    inputs.file("${buildDir}/out/package.json")
    outputs.upToDateWhen { file("${buildDir}/out/node_modules").exists() }
    npmCommand = ['install', 'kotlin']
}

task buildNpmPackage(type: NpmTask, dependsOn: prepairNpmPackage) {
    group = 'build'
    inputs.file("${buildDir}/out/package.json")
    outputs.upToDateWhen { file("${buildDir}/out/rewe-digital-konversation-${rootProject.ext.versions.runtime_js}.tgz").exists() }
    npmCommand = ['pack']
}

task publishNpmPackage(type: NpmTask, dependsOn: prepairNpmPackage) {
    group = 'build'
    inputs.file("${buildDir}/out/package.json")
    npmCommand = ['publish']
}

task overridePackageForTesting(type: Copy, dependsOn: buildNpmPackage) {
    from file("${projectDir}/src/test/javascript/")
    include "**/package.json"
    into file("${buildDir}/out")
}

task installSnapshotForTesting(type: NpmTask, dependsOn: overridePackageForTesting) {
    inputs.file("${buildDir}/out/package.json")
    outputs.upToDateWhen { file("${buildDir}/out/node_modules/@rewe-digital/konversation").exists() }
    npmCommand = ['install', "./rewe-digital-konversation-${rootProject.ext.versions.runtime_js}.tgz", 'mocha']
}

task runNpmTest(type: NpmTask, dependsOn: installSnapshotForTesting) {
    group = 'verification'
    inputs.file("${buildDir}/out/package.json")
    npmCommand = ['test']
}

test.dependsOn runNpmTest